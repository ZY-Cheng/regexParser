; https://datatracker.ietf.org/doc/html/rfc5234
; https://datatracker.ietf.org/doc/html/rfc7405

; Core Rules
; ALPHA          =  %x41-5A / %x61-7A   ; A-Z / a-z
; BIT            =  "0" / "1"
; CHAR           =  %x01-7F
;                       ; any 7-bit US-ASCII character,
;                       ;  excluding NUL
; CR             =  %x0D
;                       ; carriage return
; CRLF           =  CR LF
;                       ; Internet standard newline
; CTL            =  %x00-1F / %x7F
;                       ; controls
; DIGIT          =  %x30-39
;                       ; 0-9
; DQUOTE         =  %x22
;                       ; " (Double Quote)
; HEXDIG         =  DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
; HTAB           =  %x09
;                       ; horizontal tab
; LF             =  %x0A
;                       ; linefeed
; LWSP           =  *(WSP / CRLF WSP)
;                       ; Use of this linear-white-space rule
;                       ;  permits lines containing only white
;                       ;  space that are no longer legal in
;                       ;  mail headers and have caused
;                       ;  interoperability problems in other
;                       ;  contexts.
;                       ; Do not use when defining mail
;                       ;  headers and use with caution in
;                       ;  other contexts.
; OCTET          =  %x00-FF
;                       ; 8 bits of data
; SP             =  %x20
; VCHAR          =  %x21-7E
;                       ; visible (printing) characters
; WSP            =  SP / HTAB
;                       ; white space

; Regex Rules
expression = "/" pattern "/" [flags]

; Flags
flags                     = flag flags
flag                      = [global-flag] 
                          / [ignoreCase-flag] 
                          / [multiline-flag] 
                          / [dotAll-flag] 
                          / [unicode-flag] 
                          / [sticky-flag]
global-flag               = %x67   ; g
ignoreCase-flag           = %x69   ; i
multiline-flag            = %x6D   ; m
dotAll-flag               = %x73   ; s
unicode-flag              = %x75   ; u
sticky-flag               = %x79   ; y

; Pattern
pattern                                     = sequence 0*(alternation [sequence])
                                            / alternation [sequence]
alternation                                 = "|"

sequence                                    = factor [assertion] [sequence]
                                            / repetition [sequence]

; Repetition
repetition                                  = factor quantifier

; Quantifier
quantifier = "*" / "+" / "?" / "{" DIGIT ["," [DIGIT]] "}" ["?"]


factor                                      = anyUnicodeCharExceptFactorSpecialChar 
                                            / escape 
                                            / class 
                                            / group 
                                            / lookaround
                                            / backReference
anyUnicodeCharExceptFactorSpecialChar       = commonUnicodeChar 
                                            / [anyCharExceptLineTerminators-character / anyChar-character] 
; commonUnicodeChar ; [^/\[]{}+*|.\^$]
anyCharExceptLineTerminators-character      = "."
anyChar-character                           = "."  ; when "dotAll" flag

; Character class
class                                       = "[" ["^"] 0*(anyUnicodeCharExceptClassSpecialChar / class-escape / range) "]"
; anyUnicodeCharExceptClassSpecialChar ; [^/\[]-]
; class-escape
class-escape                                = escape / backspaceChar-class-escape 
backspaceChar-class-escape                  = "\" %x62  ; \b when inside a character class
; Range
range                                       = unicodeChar "-" unicodeChar ; left UnicodeChar code point <= right UnicodeChar code point

; Escape
escape                                      = literal-escape
                                            / anyDigit-escape
                                            / anyCharExceptDigit-escape
                                            / anyWordChar-escape
                                            / anyCharExceptWordChar-escape
                                            / anyWhiteSpaceChar-escape
                                            / anyWhiteSpaceChar-escape
                                            / horizontalTabChar-escape
                                            / CRChar-escape
                                            / LFChar-escape
                                            / verticalTabChar-escape
                                            / FFChar-escape
                                            / NULChar-escape
                                            / controlChar-escape
                                            / hexChar-escape
                                            / UTF16Char-escape
                                            / unicodeChar-escape
                                            / unicodePropertyChar-escape
                                            / anyCharExceptUnicodePropertyChar-escape
anyDigit-escape                             = "\" %x64  ; \d = [0-9]
anyCharExceptDigit-escape                   = "\" %x44  ; \D = [^0-9]
anyWordChar-escape                          = "\" %x77  ; \w = [A-Za-z0-9_]
anyCharExceptWordChar-escape                = "\" %x57  ; \W = [^A-Za-z0-9_]
anyWhiteSpaceChar-escape                    = "\" %x73  ; \s = [ \f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]
anyCharExceptWhiteSpaceChar-escape          = "\" %x53  ; \S = [^ \f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]
horizontalTabChar-escape                    = "\" %x74  ; \t
CRChar-escape                               = "\" %x72  ; \r
LFChar-escape                               = "\" %x6E  ; \n
verticalTabChar-escape                      = "\" %x76  ; \v
FFChar-escape                               = "\" %x66  ; \f
NULChar-escape                              = "\0" ; when it isn't followed by digit
controlChar-escape                          = "\" %x63 %x41-5A ; \cX X=[A-Z]
hexChar-escape                              = "\" %x78 2HEXDIG ; \xhh h=[0-9A-Fa-f]
octalChar-escape                            = "\" ["0"] %x30-37 %x30-37 ; 0-77
                                            / "\" %x30-33 %x30-37 %x30-37  ; 100-377
UTF16Char-escape                            = "\" %x75 4HEXDIG ; \uhhhh h=[0-9A-Fa-f]
unicodeChar-escape                          = "\" %x75 "{" 4*5HEXDIG "}" ; \u{hhhh} or \u{hhhhh} h=[0-9A-Fa-f] when "unicode" flag
literal-escape                              = "\" anyUnicodeCharExceptEscapeSpecialChar 
; anyUnicodeCharExceptEscapeSpecialChar ; [^dDwWsStrnvfb0]

; Unicode property escape
unicodePropertyChar-escape                  = "\" %x70 "{" UnicodePropertyBody "}" ; \p{UnicodeProperty} when "unicode" flag
anyCharExceptUnicodePropertyChar-escape     = "\" %x50 "{" UnicodePropertyBody "}" ; \P{UnicodeProperty} when "unicode" flag
UnicodePropertyBody                         = UnicodePropertyName "=" UnicodePropertyValue / UnicodeBinaryPropertyName


; Assertion
assertion                                   = wordBoundary 
                                            / nonWordBoundary 
                                            / anchor
; Anchor
anchor                                      =  endInput-anchor / beginInput-anchor
beginInput-anchor                           = "^"
endInput-anchor                             = "$"
; Word Boundary
wordBoundary                                =  "\" %x62 ; \b 
nonWordBoundary                             =  "\" %x42 ; \B 
; Lookaround
lookaround  = lookahead / lookbehind
lookahead   = "(?" ["=" / "!"] pattern ")"
lookbehind  = "(?<" ["=" / "!"] pattern ")"

; Group
group               = "(" ["?:"] pattern ")" 
                    / "(?<" 1*letter ">"  pattern ")"

; BackReference
backReference = "\" nonZeroDigit ; \n when the corresponding capturing group exsists
              / "\" %x6B "<" 1*letter ">" ; \k<name> when the corresponding named capturing group exsists



nonZeroDigit = ("1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9") [DIGIT]